"""
面向对象 :将程序组织为一组相互关联的对象，每个对象都有自己的状态（属性）和行为（方法）。
面向对象编程提供了封装、继承和多态等特性，能够更好地模拟现实世界的问题和关系。着重于谁(对象)去做
"""
"""
@ 类(Class): 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。
@ 方法：类中定义的函数。
@ 类变量：类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。
@ 数据成员：类变量或者实例变量用于处理类及其实例对象的相关的数据。
@ 方法重写：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。
@ 局部变量：定义在方法中的变量，只作用于当前实例的类。
@ 实例变量：在类的声明中，属性是用变量来表示的，这种变量就称为实例变量，实例变量就是一个用 self 修饰的变量。
@ 继承：即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。
例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟"是一个（is-a）"关系（例图，Dog是一个Animal）。
@ 实例化：创建一个类的实例，类的具体对象。
@ 对象：通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。
"""
# 面向对象的三大特点：封装、继承、多态
# 变量对应属性、函数对应方法
# 封装：将属性和方法封存成类，不需要关系具体实现、只要关心怎么用就行了

# 以空调为例
# 属性：描述对象的具体信息（电器）
# 方法：具体功能(制冷、制热、除湿)

# 空调是一个类
# 海尔空调是一个子类
# 海尔空调的一个具体的空调就是一个对象了

"""定义一个ATM(银行)类,定义了常用语录、国家属性、银行初始金额"""


class ATM:
    # 属性 -- 变量
    info = "银行ATM存取款机"
    country = "中国"
    total_balance = 50000

    # 方法
    def store_money(self, balance):
        self.total_balance += balance
        print(f"存款成功! toal_balance is {self.total_balance}")


# 如何使用ATM类呢，先实例化，创建一个类对象，然后调用对象的属性
# 实例化
a1 = ATM()
# 属性
a1.country
print(a1.country)
a1.total_balance
# 方法,让对象去做事情
a1.store_money(500)
